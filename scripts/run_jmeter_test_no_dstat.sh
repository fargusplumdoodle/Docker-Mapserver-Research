#!/bin/bash
# ------------------------------
# Isaac Thiessen, 2019-11-01
# ------------------------------
# MAPSERVER LOAD TEST SCRIPT
#	NO DSTAT
# ------------------------------
#  this script only gathers client side data and assumes you do not have access
#	to the host
#
# Requirements:
#	- Jmeter (download from website below)
#
#
# Help docs:
# 	- https://jmeter.apache.org/usermanual/get-started.html
#
# Parameters:
# 	$1 = wich host to connect to, 1, 2 or 3
#	$2 = jmx file to use
#	$3 = Test name, will create a directory in "reports/h<hostid>/<test_name>"
#
# Procedure:
#	1. Validate input, create output directory
#	2. Run jMeter test on client with test plan from argument 2 
#		- this should take ~100 seconds for most plans 
#		- save jmeter output csv in output directory as jmeter.csv
#	3. create fake dstat file
#	4. Copy jMeter testplan to output directory
#       5. Add this report to the list of reports for further analysis
#	6. Analyze information, showing graph of system resources
#		- save dstat output csv in output directory as dstat.csv
#		- save analysis as stats.txt
# 	7. print stats generated by "analyze_report.py"

if [ $# -ne 3 ];
then 
	echo "error: expected 4 arguments, got $#"
	echo '
 Parameters:
 	$1 = which host you are running the test against
	$2 = jmx file to use
#	$3 = Test name, will create a directory in "reports/h<hostid>/<test_name>"


 This script will not work as expected unless you have public key access to the specified
 host. Otherwise you have to type the password 3 times during the execution of this script
'
	exit -42
fi 

# GENERATING OUTPUT DIRECTORY 
OUTPUT_DIR="./reports/$1/$3"
echo "0. Making output directory"
mkdir -p $OUTPUT_DIR 

# -------------
# JMETER CONFIG
# -------------
# performs many requests to mapserver

# output for jmeter
JM_REPORT_FILE="$OUTPUT_DIR/jmeter.csv"
# configuration for the tests
JMX=$2

# this file is read by "./scripts/generate_test_results.py"
# to summarize report results across all reports.
REPORT_LIST_YML="./scripts/report_list.yml"


# generates a report for Jmeter
echo "1. running jmeter test, saving to $OUTPUT_DIR/jmeter.log"
echo "----------------------------"
jmeter -t $JMX -n -l $JM_REPORT_FILE > "$OUTPUT_DIR/jmeter.log"
# flags,
#	-n headless
#	-l generate csv file
#	-t loads settings file
echo "----------------------------"

# ensuring jmeter exeted correctly
if [[ ! -f "$JM_REPORT_FILE"  ]];
then
    echo "Error: something went wrong with jmeter. Could not find $JM_REPORT_FILE"
    exit -15
fi


echo "3. creating empty dstat file (THIS SCRIPT DOESN'T USE DSTAT)  $OUTPUT_DIR/dstat.csv"
cp scripts/fake_dstat.csv $OUTPUT_DIR/dstat.csv


echo "4. Copy jMeter testplan to output directory"
cp $2 $OUTPUT_DIR/

echo "5. Adding report to reports list"
echo "  - \"$OUTPUT_DIR\"" >>  $REPORT_LIST_YML

echo "6. Analysing report information, saving info to $OUTPUT_DIR/stats.txt"
python3 ./scripts/analyze_report.py $OUTPUT_DIR 

echo "WARNING: all system resource data is incorrect for this test, it was ran without dstat" >>  $OUTPUT_DIR/stats.txt

echo "7. Showing stats"
cat $OUTPUT_DIR/stats.txt

