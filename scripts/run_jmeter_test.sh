#!/bin/bash
# ------------------------------
# Isaac Thiessen, 2019-11-01
# ------------------------------
# MAPSERVER LOAD TEST SCRIPT
# ------------------------------
#
# Requirements:
#	- dstat on remote host
#	- Jmeter (download from website below)
#
#
# Help docs:
# 	- https://jmeter.apache.org/usermanual/get-started.html
#	- https://www.tecmint.com/dstat-monitor-linux-server-performance-process-memory-network/
#
# Parameters:
# 	$1 = wich host to connect to, 1, 2 or 3
#	$2 = jmx file to use
#	$3 = Test name, will create a directory in "reports/h<hostid>/<test_name>"
#
# Hosts:
# 	1. dock_test@10.5.35.61
# 	2. dock_test@10.5.35.62
# 	3. dock_test@10.5.35.63
#
#  This script will not work as expected unless you have public key access to the specified
#  host. Otherwise you have to type the password 3 times during the execution of this script
# 
# Procedure:
#	0. Validate input, create output directory
#	1. Run dstat on remote host to gather system usage for 110 seconds
#	2. Run jMeter test on client with test plan from argument 2 
#		- this should take ~100 seconds for most plans 
#		- save jmeter output csv in output directory as jmeter.csv
#	3. Once jMeter has completed, download output from dstat
#	4. Copy jMeter testplan to output directory
# 5. Add this report to the list of reports for further analysis
#	6. Analyze dstat information, showing graph of system resources
#		- save dstat output csv in output directory as dstat.csv
#		- save analysis as stats.txt
# 7. print stats generated by "analyze_report.py"

if [ $# -ne 3 ];
then 
	echo "error: expected 4 arguments, got $#"
	echo '
 Parameters:
 	$1 = wich host to connect to, 1, 2, or 3
	$2 = jmx file to use
#	$3 = Test name, will create a directory in "reports/h<hostid>/<test_name>"

 Hosts:
 	1. dock_test@10.5.35.61
 	2. dock_test@10.5.35.62
 	3. dock_test@10.5.35.63
	4. fargus@10.5.35.161

 This script will not work as expected unless you have public key access to the specified
 host. Otherwise you have to type the password 3 times during the execution of this script
'
	exit -42
fi 

# setting host
if [ $1 -eq '1' ]; then
	HOST=dock_test@10.5.35.61
elif [ $1 -eq '2' ]; then
	HOST=dock_test@10.5.35.62
elif [ $1 -eq '3' ]; then
	HOST=dock_test@10.5.35.63
elif [ $1 -eq '4' ]; then
	HOST=fargus@10.5.35.161
else
	echo "error unknown host $1"
	exit -35
fi

# GENERATING OUTPUT DIRECTORY 
OUTPUT_DIR="./reports/h$1/$3"
echo "0. Making output directory"
mkdir -p $OUTPUT_DIR 

# -------------
# JMETER CONFIG
# -------------
# performs many requests to mapserver

# output for jmeter
JM_REPORT_FILE="$OUTPUT_DIR/jmeter.csv"
# configuration for the tests
JMX=$2
HOST_DSTAT_OUTPUT="/tmp/dstat.csv"

# this file is read by "./scripts/generate_test_results.py"
# to summarize report results across all reports.
REPORT_LIST_YML="./scripts/report_list.yml"

# clearing output file
echo "1. running dstat on remote host"
ssh $HOST "echo '' > $HOST_DSTAT_OUTPUT"
# running dstat in background. It will stop after a maximum of 500 seconds. In step 3 we kill the process
# so it wont actually run for that long
ssh $HOST "dstat --time --cpu --mem --load --output $HOST_DSTAT_OUTPUT 1 500" > /dev/null &

# generates a report for Jmeter
echo "2. running jmeter test, saving to $OUTPUT_DIR/jmeter.log"
echo "----------------------------"
jmeter -t $JMX -n -l $JM_REPORT_FILE > "$OUTPUT_DIR/jmeter.log"
# flags,
#	-n headless
#	-l generate csv file
#	-t loads settings file
echo "----------------------------"

# ensuring jmeter exeted correctly
if [[ ! -f "$JM_REPORT_FILE"  ]];
then
    echo "Error: something went wrong with jmeter. Could not find $JM_REPORT_FILE"
    exit -15
fi


echo "3. saving dstat output from host to $OUTPUT_DIR/dstat.csv"
# stopping dstat on remote host
ssh $HOST "kill $(pgrep dstat)"
scp $HOST:$HOST_DSTAT_OUTPUT "$OUTPUT_DIR/dstat.csv" > /dev/null


echo "4. Copy jMeter testplan to output directory"
cp $2 $OUTPUT_DIR/

echo "5. Adding report to reports list"
echo "  - \"$OUTPUT_DIR\"" >>  $REPORT_LIST_YML

echo "6. Analysing report information, saving info to $OUTPUT_DIR/stats.txt"
python3 ./scripts/analyze_report.py $OUTPUT_DIR 

echo "7. Showing stats"
cat $OUTPUT_DIR/stats.txt
